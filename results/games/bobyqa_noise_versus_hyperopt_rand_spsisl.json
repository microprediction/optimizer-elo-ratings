{"n_dim": 2, "n_trials": 130, "objective": "markowitz_analytic_on_cube", "white": "bobyqa_noise", "black": "hyperopt_rand", "traceback": ["Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/humpday/comparison/eloratings.py\", line 41, in optimizer_game\n    white_best_val, white_best_x, white_feval_count = white(objective, n_trials=n_white_trials, n_dim=n_dim,\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/humpday/optimizers/bobyqacube.py\", line 38, in bobyqa_noise_cube\n    return bobyqa_cube_factory(objective=objective, n_trials=n_trials, n_dim=n_dim,\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/humpday/optimizers/bobyqacube.py\", line 27, in bobyqa_cube_factory\n    soln = solve(_objective, x0, bounds=(lb, ub), maxfun=n_trials, do_logging=False)\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/pybobyqa/solver.py\", line 809, in solve\n    solve_main(objfun, x0, args, xl, xu, npt, rhobeg, rhoend, maxfun, nruns, nf, nx, nsamples, params,\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/pybobyqa/solver.py\", line 390, in solve_main\n    f_list, num_samples_run, exit_info = control.evaluate_objective(x, number_of_samples, params)\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/pybobyqa/controller.py\", line 349, in evaluate_objective\n    f_list[i] = eval_objective(self.objfun, remove_scaling(x, self.scaling_changes), self.args, eval_num=self.nf, pt_num=self.nx,\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/pybobyqa/util.py\", line 51, in eval_objective\n    f = objfun(x, *args)\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/humpday/optimizers/bobyqacube.py\", line 25, in _objective\n    return objective(u)\n  File \"/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/humpday/objectives/portfolio.py\", line 87, in markowitz_analytic_on_cube\n    assert all([ 0<=ui<=1 for ui in u])\nAssertionError\n", "passing"], "best_val": [null, null], "best_x": [null, null], "feval_count": [null, null], "n_trials_instructed": [null, null], "passing": [false, null], "completed": false, "winner": "incomplete", "points": null}