{"name": ["shgo_slsqp_sobol_cube", "shgo_powell_sobol_cube", "shgo_nelder_sobol_cube", "scipy_slsqp_cube", "scipy_powell_cube", "scipy_lbfgsb_cube", "pysot_ei_cube", "pysot_lcb_cube", "pysot_random_cube", "pysot_srbf_cube", "pysot_dycors_cube", "ax_default_cube", "optuna_cmaes_cube", "optuna_tpe_cube", "optuna_random_cube", "optuna_random_cube_clone", "optuna_random_cube_clone_1", "optuna_random_cube_clone_2", "platypus_genetic_cube", "platypus_evolutionary_cube", "platypus_nsgaii_cube", "platypus_cmaes_cube", "platypus_gde3_cube", "platypus_ibea_cube", "platypus_moead_cube", "platypus_omopso_cube", "platypus_smpso_cube", "platypus_spea2_cube", "platypus_epsmoea_cube", "nevergrad_ngopt_cube", "nevergrad_ngopt4_cube", "nevergrad_de_cube", "nevergrad_portfolio_cube", "nevergrad_oneplus_cube", "nevergrad_hammersley_cube", "nevergrad_ngopt8_cube", "hyperopt_tpe_cube", "hyperopt_atpe_cube", "hyperopt_rand_cube", "pymoo_nelder_cube", "pymoo_nsga3_cube", "pymoo_unsga3_cube", "pymoo_pattern_cube", "pymoo_nsga2_cube", "pymoo_unsga3_cube", "skopt_gp_default_cube", "bayesopt_ucb_cube", "bayesopt_ei_cube", "bayesopt_poi_cube", "nlopt_direct_cube", "nlopt_ags_cube", "nlopt_esch_cube", "nlopt_isres_cube", "nlopt_crs2lm_cube", "nlopt_directr_cube", "nlopt_directo_cube", "nlopt_directl_cube", "bobyqa_default_cube", "bobyqa_noise_cube", "ultraopt_random_cube", "ultraopt_forest_cube", "ultraopt_gbrt_cube", "ultraopt_etpe_cube", "dlib_cube", "dlib_default_cube", "hebo_cube_sequential", "hebo_cube_batch", "hebo_sequential_cube", "hebo_batch_cube"], "count": [117, 121, 143, 416, 69, 142, 429, 468, 419, 454, 428, 432, 406, 636, 613, 655, 620, 607, 449, 459, 435, 310, 454, 434, 645, 400, 458, 433, 475, 629, 612, 634, 612, 602, 653, 640, 629, 644, 660, 492, 665, 1294, 523, 433, 0, 439, 418, 416, 444, 611, 405, 621, 607, 626, 588, 599, 626, 577, 609, 337, 337, 288, 360, 344, 332, 353, 403, 14, 25], "rating": [1780.0435690090087, 1839.9372834491235, 1869.4305977888446, 1445.4554620175202, 1213.3735556280474, 986.9464886347525, 2371.9044043607073, 2182.054571768452, 1173.072654322087, 2597.5907204258087, 2580.4511474645715, 2411.8672502809877, 1801.769543200359, 1964.196713252833, 1600, 1600, 1600, 1600, 1361.51028909889, 1293.0849711090589, 1441.9513160830438, 1019.7007012717761, 1104.4985345726618, 1299.0355897427987, 1278.5649202550399, 1439.6632023748348, 1255.5827424111371, 1103.5811664520684, 1441.7628668935786, 2135.60520248156, 2202.1743487560475, 1519.789730822321, 1553.3288450947596, 2310.661711213103, 1341.673617248058, 2143.5088116343036, 1651.6890232054186, 1757.8832519359953, 1724.6849874306477, 1982.7098703811766, 1554.1500668311169, 1602.3662989211975, 2274.22611530872, 1337.2370252419746, 1600, 2516.311190407994, 2404.735811003441, 2493.880339405198, 2731.4198063361764, 2016.4741571718184, 2176.1797928173632, 1716.7298084516776, 1133.8687461695806, 1554.3111243810483, 2366.2186809171635, 1637.7792493330073, 1779.1692363888242, 2398.7615353728143, 2368.7110117526236, 1271.7198765873336, 2068.6118643599348, 2135.099788773608, 2221.916485023724, 2385.3023092025674, 2226.625888506073, 2478.7315066681213, 2327.579393042241, 1829.4208674632555, 1853.7045468460165], "traceback": ["passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "Black took 135 function evals when instructed to use 135", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "Black took 211 function evals when instructed to use 211", "passing", "passing", "passing", "passing", "passing", "passing", "passing", "not yet run", "passing", "passing", "passing", "passing", "passing", "Black took 219 function evals when instructed to use 219", "passing", "passing", "passing", "passing", "passing", "Black took 341 function evals when instructed to use 341", "Black took 551 function evals when instructed to use 551", "passing", "passing", "passing", "passing", "passing", "Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.8/x64/lib/python3.8/site-packages/humpday/comparison/eloratings.py\", line 76, in optimizer_game\n    black_best_val, black_best_x, black_feval_count = black(objective, n_trials=n_black_trials,\n  File \"/opt/hostedtoolcache/Python/3.8.8/x64/lib/python3.8/site-packages/humpday/optimizers/dlibcube.py\", line 33, in dlib_cube\n    return dlib_default_cube(objective=objective, n_trials=n_trials, n_dim=n_dim, with_count=with_count)  # It is useful to have a clone of one of the better algos\n  File \"/opt/hostedtoolcache/Python/3.8.8/x64/lib/python3.8/site-packages/humpday/optimizers/dlibcube.py\", line 28, in dlib_default_cube\n    best_x, best_val = find_min_global(_objective, lb, ub, n_trials)\nRuntimeError: \n\nError detected at line 63.\nError detected in file /tmp/pip-install-wwi1eh53/dlib_db4050cfd27e420483a0f2682d8151c9/tools/python/src/global_optimization.cpp.\nError detected in function double call_func(pybind11::object, const dlib::matrix<double, 0, 1>&).\n\nFailing expression was 0 < num && num < 35.\nFunctions being optimized must take between 1 and 35 scalar arguments.\n\n", "Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.8/x64/lib/python3.8/site-packages/humpday/comparison/eloratings.py\", line 41, in optimizer_game\n    white_best_val, white_best_x, white_feval_count = white(objective, n_trials=n_white_trials, n_dim=n_dim,\n  File \"/opt/hostedtoolcache/Python/3.8.8/x64/lib/python3.8/site-packages/humpday/optimizers/dlibcube.py\", line 28, in dlib_default_cube\n    best_x, best_val = find_min_global(_objective, lb, ub, n_trials)\nRuntimeError: \n\nError detected at line 63.\nError detected in file /tmp/pip-install-wwi1eh53/dlib_db4050cfd27e420483a0f2682d8151c9/tools/python/src/global_optimization.cpp.\nError detected in function double call_func(pybind11::object, const dlib::matrix<double, 0, 1>&).\n\nFailing expression was 0 < num && num < 35.\nFunctions being optimized must take between 1 and 35 scalar arguments.\n\n", "passing", "passing", "passing", "passing"], "active": [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true]}